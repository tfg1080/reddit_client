{"version":3,"sources":["components/navbar/Navbar.js","components/RedditCard/RedditCard.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","RedditCard","useState","imgUrl","setImgUrl","useEffect","getSubredditImage","fetch","subreddit","then","response","json","jsonResponse","data","icon_img","handleSubClick","search","slice","console","log","src","alt","onClick","author","Math","round","ups","postType","title","mediaUrl","width","height","controls","hostedVideoUrl","reddit_video","fallback_url","thumbnail","length","href","media","App","posts","setPosts","getInitialPosts","children","map","post","input","type","placeholder","onChange","e","setTimeout","target","value","subreddit_name_prefixed","postUrl","url","subsub","subreddit_subscribers","post_hint","name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e85adaf.chunk.js","sourcesContent":["import React from 'react';\nimport './Navbar.css'\n\nexport function Navbar(props) {\n    return (\n      <div className=\"Navbar\">\n        <h1>Tim's Reddit Bitch</h1>\n\n  \n      </div>\n    );\n  }\n  ","import React, {useState, useEffect} from 'react';\nimport './RedditCard.css';\n\n\nexport function RedditCard(props) {\n    const [imgUrl, setImgUrl] = useState(\"https://i.redd.it/8lbvjjhmzaj61.jpg\")\n\n\n    useEffect(() => {\n        getSubredditImage()\n      });\n   \n\n     const media = () => {switch(props.postType) {\n        case 'image':\n        return (<img className=\"content-image\" src={props.mediaUrl} alt='contentimage'></img>);\n        case 'hosted:video':\n            return(<video className=\"content-video\" width='320' height=\"240\" controls ><source src={props.hostedVideoUrl.reddit_video.fallback_url}/></video>)\n        case 'link':\n            if(props.thumbnail.length > 15) {\n                 return (\n                    <a href={props.mediaUrl} ><img className=\"content-thumbnail\" alt=\"link thumbnail\" src={props.thumbnail} ></img></a>) }\n                 break;\n        default:\n            break;\n        }} \n\n        \n        \n\n      const getSubredditImage = () => {\n        fetch(`https://www.reddit.com/${props.subreddit}/about.json`\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n            if(jsonResponse.data.icon_img){\n                setImgUrl(jsonResponse.data.icon_img);\n            }\n            \n        })\n        } \n\n    const handleSubClick = () => {\n        props.search(props.subreddit.slice(2));\n        console.log(props.subreddit.slice(2));\n    }\n    \n\n    return(\n        <div className=\"RedditCard\">\n                <div className='card-header'>\n                <img className=\"icon\" src={imgUrl} alt=\"subreddit header\" onClick={handleSubClick}></img>\n                <h4 className=\"subreddit-name\" onClick={handleSubClick} >{props.subreddit}</h4>\n    <h4 className='author'>Posted by {props.author}</h4>\n                <h4 className='ups'>Up Votes: {Math.round(props.ups/1000)}K</h4>\n                </div>\n                <div className={props.postType}>\n                <h2 className='title'>{props.title}</h2>\n                { media() }\n            </div>\n        </div>\n    )\n}\n\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nimport {Navbar} from '../src/components/navbar/Navbar.js'\nimport {RedditCard} from '../src/components/RedditCard/RedditCard.js'\n\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    getInitialPosts();\n  },[]);\n  \n  const getInitialPosts = () => {\n    fetch(\"https://www.reddit.com/r/popular/.json\"\n      ).then(response => response.json()\n      ).then(jsonResponse =>  { \n    \n          setPosts(jsonResponse.data.children.map(post => post));\n      });\n  };\n\n  const search = (input) => {\n    // const searchTerm = in.target.value;\n    fetch(`https://www.reddit.com/r/${input}/.json`\n    ).then(response => response.json()\n    ).then(jsonResponse =>  {\n      if(!jsonResponse.data){\n        return;\n      }\n        setPosts(jsonResponse.data.children.map(post => post))\n      });\n  }\n\n  const handleSearch = (e) => {\n    setTimeout(search(e.target.value), 2000)\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <input type=\"search\" placeholder=\"Search Subreddit...\" onChange={handleSearch}/>\n      {posts.map(post => {\n       return (\n         <RedditCard \n        title= {post.data.title}\n        key={post.data.name}\n        subreddit={post.data.subreddit_name_prefixed}\n        author={post.data.author}\n        postUrl={post.data.url}\n        ups={post.data.ups}\n        mediaUrl={post.data.url}\n        hostedVideoUrl={post.data.media}\n        subsub={post.data.subreddit_subscribers}\n        postType={post.data.post_hint}\n        thumbnail={post.data.thumbnail}\n        search={search}\n       />\n\n       )})\n      }\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}